[{"/home/aa019/dev/kkanbu-ninja/src/app/layout.tsx":"1","/home/aa019/dev/kkanbu-ninja/src/app/page.tsx":"2","/home/aa019/dev/kkanbu-ninja/src/app/api/user/route.ts":"3","/home/aa019/dev/kkanbu-ninja/src/app/api/user/controller.ts":"4","/home/aa019/dev/kkanbu-ninja/src/app/rank/list.tsx":"5"},{"size":282,"mtime":1681110236052,"results":"6","hashOfConfig":"7"},{"size":566,"mtime":1681182239570,"results":"8","hashOfConfig":"7"},{"size":398,"mtime":1681181672150,"results":"9","hashOfConfig":"7"},{"size":1294,"mtime":1681181672150,"results":"10","hashOfConfig":"7"},{"size":5961,"mtime":1681182239570,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k89io6",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/home/aa019/dev/kkanbu-ninja/src/app/layout.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/page.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/user/route.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/user/controller.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/rank/list.tsx",["28"],[],"\"use client\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport React , { useEffect, useState } from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nexport default function Page(props:any) {\r\n    const {userData} = props\r\n  const [original, setOriginal] = useState<any[]>(userData)\r\n  const [filtered, setFilter] = useState<any[]>(userData)\r\n  const [gemList, setGemList] = useState<any[]>([])\r\n  \r\n  const [filterName, setName] = useState<string>('')\r\n  const [filterGem, setGem] = useState<string>('')\r\n  const [filterGemInput, setGemInput] = useState<string>('')\r\n  useEffect(()=>{\r\n    (async () => {\r\n      setOriginal(userData)\r\n      \r\n      const gemSet = await userData?.reduce((acc:any, user:any)=>{\r\n        user.items?.allGems.forEach((gemName:any)=>{\r\n          acc.add(gemName)\r\n        })\r\n        \r\n        return acc\r\n      },new Set())\r\n      \r\n      setGemList([\"\",...Array.from(gemSet||[])])\r\n      setFilter(userData)\r\n    })()\r\n  },[userData])\r\n  \r\n  \r\n  const findName = (e:any)=>{\r\n    setName(e.target.value||'')\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if (filterName==='' && (filterGem===''||filterGem===null)){\r\n      setFilter(original)\r\n      return\r\n    }else{\r\n      const newFiltered = original.filter(user=>{\r\n        const gemCheck = filterGem && user.items?.allGems.findIndex((gem:any)=>gem===filterGem)>-1\r\n        \r\n        const nameCheck = filterName && (user.name.includes(filterName) || user.account?.includes(filterName) || user.class.includes(filterName))\r\n        return Boolean(gemCheck||nameCheck)\r\n      }).sort((a,b)=>{\r\n        return a.rank-b.rank\r\n      })\r\n      setFilter(newFiltered)\r\n    }\r\n\r\n    \r\n  },[filterGem, filterName])\r\n  \r\n\r\n  return <TableContainer component={Paper}>\r\n    <h2 style={{fontSize:50, textAlign: 'center',color:'white',backgroundColor: '#28281c'}}>깐부찾기</h2>\r\n    <a style={{    backgroundColor: '#b34afb',\r\n    color:'white',\r\n    display: 'inline-block',\r\n    margin:'5px',\r\n    right:10,\r\n    padding: '2px 10px',\r\n    borderRadius: 5}} target='_blank' href=\"https://www.twitch.tv/ham_90\">twitch</a>\r\n    <a style={{    backgroundColor: '#fb4ab0',\r\n    color:'white',\r\n    display: 'inline-block',\r\n    margin:'5px',\r\n    right:10,\r\n    padding: '2px 10px',\r\n    borderRadius: 5}} target='_blank' href=\"https://tgd.kr/s/ham_90/\">햄게더</a>\r\n    <a style={{    backgroundColor: '#626262',\r\n    color:'white',\r\n    display: 'inline-block',\r\n    margin:'5px',\r\n    right:10,\r\n    padding: '2px 10px',\r\n    borderRadius: 5}} target='_blank' href=\"https://docs.google.com/spreadsheets/d/1mQ-QUtPBI_T4sTcI1SBgl1QOdtiq_ONgxqzO6FyCpaY/edit#gid=2071372347\">깐부시트</a>\r\n    <div style={{margin:20}}>\r\n    <TextField id=\"outlined-basic\" label=\"검색\" variant=\"outlined\" onChange={findName} />\r\n    <Autocomplete\r\n      disablePortal\r\n      id=\"combo-box-demo\"\r\n      options={gemList}\r\n      sx={{ width: 300 }}\r\n      value={filterGem}\r\n        onChange={(event: any, newValue: string |null) => {\r\n          setGem(newValue||'');\r\n        }}\r\n        inputValue={filterGemInput}\r\n        onInputChange={(event, newInputValue) => {\r\n          setGemInput(newInputValue);\r\n        }}\r\n      renderInput={(params) => <TextField {...params} label=\"쩸\" />}\r\n    />\r\n    \r\n      </div>\r\n      <Table sx={{ minWidth: 850 }} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow style={{backgroundColor:'#626262'}}>\r\n          <TableCell>순위</TableCell>\r\n            <TableCell>계정명</TableCell>\r\n            <TableCell style={{maxWidth:180}}>케릭명</TableCell>\r\n            <TableCell>육개장</TableCell>\r\n            <TableCell>직업</TableCell>\r\n            \r\n            <TableCell align=\"right\">레베루</TableCell>\r\n            <TableCell align=\"right\" style={{maxWidth:120}}>경험치</TableCell>\r\n            <TableCell align=\"right\">챌린지</TableCell>\r\n            <TableCell>보러가기</TableCell>\r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {filtered&&filtered.map((row:any) => (\r\n            <TableRow\r\n              style={{backgroundColor:row.dead?'#a54e5d':'#5e51af'}}\r\n              key={row.rank}\r\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.rank}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.account}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\" style={{maxWidth:180}}>\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.dead?'ㅇㅇ쥬금':'아직안쥬금'}\r\n              </TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.class}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.level}</TableCell>\r\n              <TableCell align=\"right\" style={{maxWidth:120}}>{row.experience}</TableCell>\r\n              <TableCell align=\"right\">{row.challenges?.completed}</TableCell>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                <a style={{    backgroundColor: 'white',\r\n    display: 'inline-block',\r\n    padding: '2px 10px',\r\n    borderRadius: 5}} target='_blank' href={`https://www.pathofexile.com/account/view-profile/${row.account}/characters?characterName=${row.name}`}>\r\n                  POE\r\n                </a>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n}",{"ruleId":"29","severity":1,"message":"30","line":61,"column":5,"nodeType":"31","endLine":61,"endColumn":28,"suggestions":"32"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'original'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilter' needs the current value of 'original'.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [filterGem, filterName, original]",{"range":"36","text":"37"},[2013,2036],"[filterGem, filterName, original]"]