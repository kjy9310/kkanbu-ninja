[{"/home/aa019/dev/kkanbu-ninja/src/app/layout.tsx":"1","/home/aa019/dev/kkanbu-ninja/src/app/page.tsx":"2","/home/aa019/dev/kkanbu-ninja/src/app/api/user/route.ts":"3","/home/aa019/dev/kkanbu-ninja/src/app/api/user/controller.ts":"4","/home/aa019/dev/kkanbu-ninja/src/app/rank/list.tsx":"5","/home/aa019/dev/kkanbu-ninja/src/app/api/request/route.ts":"6","/home/aa019/dev/kkanbu-ninja/src/app/request/list.tsx":"7","/home/aa019/dev/kkanbu-ninja/src/app/request/page.tsx":"8","/home/aa019/dev/kkanbu-ninja/src/app/api/auth/[...nextauth]/route.ts":"9","/home/aa019/dev/kkanbu-ninja/src/app/sign/button.tsx":"10"},{"size":1476,"mtime":1681622167557,"results":"11","hashOfConfig":"12"},{"size":538,"mtime":1681622167557,"results":"13","hashOfConfig":"12"},{"size":350,"mtime":1681233028020,"results":"14","hashOfConfig":"12"},{"size":1276,"mtime":1681305961886,"results":"15","hashOfConfig":"12"},{"size":12625,"mtime":1681738825453,"results":"16","hashOfConfig":"12"},{"size":2087,"mtime":1681396267161,"results":"17","hashOfConfig":"12"},{"size":7467,"mtime":1681622167557,"results":"18","hashOfConfig":"12"},{"size":1097,"mtime":1681521948126,"results":"19","hashOfConfig":"12"},{"size":1114,"mtime":1681402894786,"results":"20","hashOfConfig":"12"},{"size":621,"mtime":1681396267161,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k89io6",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aa019/dev/kkanbu-ninja/src/app/layout.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/page.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/user/route.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/user/controller.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/rank/list.tsx",["53","54","55","56","57"],[],"\"use client\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport React , { useEffect, useState } from 'react';\r\nimport { ButtonGroup , Button, TextField } from '@mui/material';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { purple, pink } from '@mui/material/colors';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport Typography from '@mui/material/Typography';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#133d62',//pink[300],\r\n    },\r\n    secondary: {\r\n      // main: purple[500],\r\n      main: '#133d62',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nconst POEHOST = 'https://poe.game.daum.net/'\r\n// const POEHOST = 'https://www.pathofexile.com/'\r\n\r\nconst CLASS:any = {\r\n  Marauder:'https://i.imgur.com/UWvvGKZ.png',\r\n  Duelist:'https://i.imgur.com/c8vB7OX.png',\r\n  Ranger:'https://i.imgur.com/qtdp8Jh.png',\r\n  Shadow:'https://i.imgur.com/nWahbNR.png',\r\n  Witch:'https://i.imgur.com/XSqMHh9.png',\r\n  Templar:'https://i.imgur.com/i53a1id.png',\r\n  Scion:'https://i.imgur.com/9IfOWoN.png',\r\n  Juggernaut:'https://i.imgur.com/QFubXr4.png',\r\n  Berserker:'https://i.imgur.com/l2vDx4j.png',\r\n  Chieftain:'https://i.imgur.com/WSkz5xh.png',\r\n  Slayer:'https://i.imgur.com/UMAd0yL.png',\r\n  Gladiator:'https://i.imgur.com/F3FQxV4.png',\r\n  Champion:'https://i.imgur.com/ltGrJ1K.png',\r\n  Deadeye:'https://i.imgur.com/NCybIiO.png',\r\n  Raider:'https://i.imgur.com/oFwpUJO.png',\r\n  Pathfinder:'https://i.imgur.com/EVg7lhR.png',\r\n  Assassin:'https://i.imgur.com/0tURSJ4.png',\r\n  Saboteur:'https://i.imgur.com/7dNJPM4.png',\r\n  Trickster:'https://i.imgur.com/n8jtbfr.png',\r\n  Necromancer:'https://i.imgur.com/k1debpx.png',\r\n  Occultist:'https://i.imgur.com/BGrQsx5.png',\r\n  Elementalist:'https://i.imgur.com/G5fSIS8.png',\r\n  Inquisitor:'https://i.imgur.com/PyzEPzP.png',\r\n  Hierophant:'https://i.imgur.com/8iu1k86.png',\r\n  Guardian:'https://i.imgur.com/sHiE02Y.png',\r\n  Ascendant:'https://i.imgur.com/Th9qGrm.png'\r\n}\r\n\r\nexport default function Page(props:any) {\r\n    const {userData} = props\r\n  const [original, setOriginal] = useState<any[]>(userData)\r\n  const [filtered, setFilter] = useState<any[]>(userData)\r\n  const [gemList, setGemList] = useState<any[]>([])\r\n  const [uniqueList, setUniqueList] = useState<any[]>([])\r\n  \r\n  const [filterClass, setClass] = useState<string>('')\r\n  const [filterName, setName] = useState<string>('')\r\n  const [filterLink, setLink] = useState<string>('')\r\n  \r\n  const [filterGem, setGem] = useState<string>('')\r\n  const [filterGemInput, setGemInput] = useState<string>('')\r\n  \r\n  const [filterUnique, setUnique] = useState<string>('')\r\n  const [filterUniqueInput, setUniqueInput] = useState<string>('')\r\n\r\n  const [filterDeath, setDeath] = useState<string>('all')\r\n\r\n  const downloadCsv = function (data:any) {\r\n    const blob = new Blob([data], { type: 'text/csv;charset=utf-8' });\r\n \r\n    const url = window.URL.createObjectURL(blob)\r\n \r\n    const a = document.createElement('a')\r\n \r\n    a.setAttribute('href', url)\r\n \r\n    a.setAttribute('download', 'download.csv');\r\n \r\n    a.click()\r\n  }\r\n  const csvheader = [\"rank\", \"level\", \"dead\",\"name\",\"class\", \"challenges\",\"account\",\"experience\",\"has5Link\",\"has6Link\",\"mainSkills\",\"allGems\"]\r\n  const getCsv = ()=>{\r\n    const header= csvheader.join()\r\n\r\n    const commaSeperated = userData.map((row:any)=>{\r\n      \r\n      const targets = csvheader.map((key)=>{\r\n        if (key===\"challenges\"){\r\n          return row[key].completed\r\n        } else if(key===\"has5Link\"){\r\n          return row.items?.has5Link\r\n        } else if(key===\"has6Link\"){\r\n          return row.items?.has6Link\r\n        } else if(key===\"mainSkills\"){\r\n          return row.items?.mainSkills.map((gem:any)=>gem.baseType).join('|')\r\n        } else if(key===\"allGems\"){\r\n          return row.items?.allGems.join('|')\r\n        }\r\n        return row[key]\r\n      })\r\n      \r\n      const csvRow = targets.join()\r\n      return csvRow\r\n    })\r\n    downloadCsv([header,...commaSeperated].join('\\n'))\r\n  }\r\n\r\n  useEffect(()=>{\r\n    (async () => {\r\n      setOriginal(userData)\r\n      \r\n      const gemSet = await userData?.reduce((acc:any, user:any)=>{\r\n        user.items?.allGems?.forEach((gemName:any)=>{\r\n          acc.add(gemName)\r\n        })\r\n        \r\n        return acc\r\n      },new Set())\r\n      \r\n      setGemList([\"\",...Array.from(gemSet||[])].sort())\r\n\r\n      const uniqueSet = await userData?.reduce((acc:any, user:any)=>{\r\n        user.items?.allUniques?.forEach((unique:string)=>{\r\n          acc.add(unique)\r\n        })\r\n        \r\n        return acc\r\n      },new Set())\r\n      setUniqueList([\"\",...Array.from(uniqueSet||[])].sort())\r\n      setFilter(userData)\r\n    })()\r\n  },[userData])\r\n  \r\n  \r\n  const findName = (e:any)=>{\r\n    setName(e.target.value||'')\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if (filterName==='' && (filterGem===''||filterGem===null) && filterDeath==='all' && filterUnique==='' && filterLink==='' && filterClass===''){\r\n      setFilter(userData)\r\n      return\r\n    }else{\r\n      const newFiltered = userData.filter((user:any)=>{\r\n        const gemCheck = filterGem ? user.items?.allGems?.findIndex((gem:any)=>gem===filterGem)>-1 : true\r\n        const uniqueCheck = filterUnique ? user.items?.allUniques?.findIndex((unique:any)=>unique===filterUnique)>-1 : true\r\n        const deathCheck = filterDeath === 'all'? true : filterDeath==='dead'?user.dead:!user.dead\r\n        const classCheck = filterClass ? filterClass===user.class :true\r\n        const nameCheck = filterName ? (user.name.includes(filterName) || user.account?.includes(filterName) || user.class.includes(filterName)) : true\r\n        const linkCheck = filterLink ? (\r\n          filterLink==='6'? user.items?.has6Link : (\r\n            filterLink==='5'? user.items?.has5Link : (\r\n              filterLink==='4'? user.items?.has6Link===false&&user.items?.has5Link===false : false\r\n            )\r\n          )\r\n        ): true\r\n        return Boolean(gemCheck&&nameCheck&&deathCheck&&uniqueCheck&&linkCheck&&classCheck)\r\n      }).sort((a:any,b:any)=>{\r\n        return a.rank-b.rank\r\n      })\r\n      setFilter(newFiltered)\r\n    }\r\n\r\n    \r\n  },[filterGem, filterName, filterDeath, filterUnique,filterLink, filterClass])\r\n  \r\n  const handleChange = (event: SelectChangeEvent) => {\r\n    setLink(event.target.value as string);\r\n  };\r\n\r\n  return (<ThemeProvider theme={theme}>\r\n  <TableContainer component={Paper} className=\"listContent\">\r\n  <div className=\"search\">\r\n    <TextField color=\"primary\" style={{minWidth:150}} \r\n      id=\"outlined-basic\" label=\"검색\" \r\n      variant=\"outlined\" onChange={findName} value={filterName} />\r\n    <Autocomplete\r\n      color=\"primary\"\r\n      disablePortal\r\n      id=\"combo-box-gem\"\r\n      options={gemList}\r\n      sx={{ width: 300 }}\r\n      value={filterGem}\r\n        onChange={(event: any, newValue: string |null) => {\r\n          setGem(newValue||'');\r\n        }}\r\n        inputValue={filterGemInput}\r\n        onInputChange={(event, newInputValue) => {\r\n          setGemInput(newInputValue);\r\n        }}\r\n      renderInput={(params) => <TextField {...params} label=\"쩸\" />}\r\n    />\r\n    <Autocomplete\r\n    color=\"primary\"\r\n      disablePortal\r\n      id=\"combo-box-unique\"\r\n      options={uniqueList}\r\n      sx={{ width: 300 }}\r\n      value={filterUnique}\r\n        onChange={(event: any, newValue: string |null) => {\r\n          setUnique(newValue||'');\r\n        }}\r\n        inputValue={filterUniqueInput}\r\n        onInputChange={(event, newInputValue) => {\r\n          setUniqueInput(newInputValue);\r\n        }}\r\n      renderInput={(params) => <TextField {...params} label=\"유닠\" />}\r\n    />\r\n    <FormControl style={{minWidth:150}}>\r\n        <InputLabel color=\"primary\" id=\"demo-simple-select-label\">링크</InputLabel>\r\n        <Select\r\n          color=\"primary\"\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={filterLink}\r\n          label=\"Link\"\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={''}>전부</MenuItem>\r\n          <MenuItem value={'6'}>6링오우너</MenuItem>\r\n          <MenuItem value={'5'}>5링</MenuItem>\r\n          <MenuItem value={'4'}>기타</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      \r\n      <ButtonGroup variant=\"outlined\" aria-label=\"outlined primary button group\" style={{boxShadow:'none'}}>\r\n        <Button color=\"primary\"\r\n        variant='contained'\r\n        style={{backgroundColor:(filterDeath==='dead'||filterDeath==='all')?'#7a1100':'transparent'}}\r\n        onClick={()=>setDeath(filterDeath==='all'?'alive':'all')}>죽음</Button>\r\n        <Button color=\"secondary\"\r\n        variant='contained'\r\n        style={{backgroundColor:(filterDeath==='alive'||filterDeath==='all')?'#133d62':'transparent'}}\r\n        onClick={()=>setDeath(filterDeath==='all'?'dead':'all')}>살음</Button>\r\n      </ButtonGroup>\r\n      <div>\r\n        <Button variant=\"outlined\" onClick={()=>{\r\n          setDeath('all')\r\n          setClass('')\r\n          setName('')\r\n          setLink('')\r\n          setGem('')\r\n          setUnique('')\r\n        }}>리셋</Button>\r\n        <div>{`${filtered&&filtered.length}명`}</div>\r\n      </div>\r\n      <Button color=\"primary\"\r\n        variant='contained'\r\n        onClick={getCsv}>CSV</Button>\r\n  </div>\r\n  <div className='classes'>{Object.keys(CLASS).map(className=>{\r\n    return <div key={`search-${className}`} onClick={()=>setClass(filterClass===className?'':className)} style={{border:filterClass===className?'3px solid #133d62':'none'}} className='classBox'>\r\n      <div className=\"classImg\" style={{backgroundImage: `url(${CLASS[className]})`}}></div>\r\n    </div>})}\r\n  </div>\r\n  <div>\r\n    {filtered&&filtered.length&&filtered.length>0&&filtered.map((row:any, index:number) => (<Accordion key={row._id} style={{backgroundColor:index%2===0?'#0a0a0acc':'#141414cc'}}>\r\n        <AccordionSummary\r\n          expandIcon={<span style={{color:'white'}}>V</span>}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className=\"rankRow\" style={{ minHeight: 45}}>\r\n            <span>\r\n              <span style={{\r\n                minWidth: 40,\r\n                display: 'inline-block'\r\n              }}>{`${index+1} `}</span>  \r\n              <span style={{\r\n                minWidth: 70,\r\n                textAlign: 'left',\r\n                display: 'inline-block'\r\n              }}>{`Lv.${row.level} `}</span>\r\n              <img style={{border: '1px solid black', width:32, height:25, display:'inline-block'}} src={CLASS[row.class]}/>\r\n              <span style={{color:row.dead?'red':'white'}}>{row.name}</span>\r\n            </span>\r\n            <span style={{display:'flex'}}>\r\n              {row.items?.mainSkills?.map((skillgem:any)=>{\r\n                return <Tooltip key={skillgem.id} title={skillgem.baseType}>\r\n                <img src={skillgem.icon}/>\r\n              </Tooltip>\r\n              })}\r\n            </span>\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n            <Typography className=\"rankRow\" style={{fontSize:'1rem !important',width:'80%',margin:'0 auto'}}>\r\n              <span>{`전체 랭킹: ${row.rank}`}</span>\r\n              <span >{`챌: ${row.challenges?.completed} `}</span>\r\n              <span>{`계정: ${row.account}`}</span>\r\n              <span >{`Exp.${row.experience} `}</span>\r\n              <a style={{    backgroundColor: '#133d62', textAlign:'center',\r\n                display: 'inline-block', padding: '2px 10px', borderRadius: 5}} \r\n                target='_blank' href={`${POEHOST}account/view-profile/${encodeURIComponent(row.account)}/characters?characterName=${encodeURIComponent(row.name)}`}>\r\n                  POE\r\n                </a>\r\n            </Typography>        \r\n        </AccordionDetails>\r\n      </Accordion>\r\n    ))}\r\n  </div>\r\n</TableContainer>\r\n</ThemeProvider>)\r\n}","/home/aa019/dev/kkanbu-ninja/src/app/api/request/route.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/request/list.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/request/page.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/auth/[...nextauth]/route.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/sign/button.tsx",[],[],{"ruleId":"58","severity":1,"message":"59","line":186,"column":5,"nodeType":"60","endLine":186,"endColumn":79,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":295,"column":15,"nodeType":"64","endLine":295,"endColumn":125},{"ruleId":"65","severity":1,"message":"66","line":295,"column":15,"nodeType":"64","endLine":295,"endColumn":125},{"ruleId":"62","severity":1,"message":"63","line":301,"column":17,"nodeType":"64","endLine":301,"endColumn":43},{"ruleId":"65","severity":1,"message":"66","line":301,"column":17,"nodeType":"64","endLine":301,"endColumn":43},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userData'. Either include it or remove the dependency array.","ArrayExpression",["67"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"68","fix":"69"},"Update the dependencies array to be: [filterGem, filterName, filterDeath, filterUnique, filterLink, filterClass, userData]",{"range":"70","text":"71"},[6855,6929],"[filterGem, filterName, filterDeath, filterUnique, filterLink, filterClass, userData]"]