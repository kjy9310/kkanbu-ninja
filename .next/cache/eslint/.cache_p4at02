[{"/home/aa019/dev/kkanbu-ninja/src/app/layout.tsx":"1","/home/aa019/dev/kkanbu-ninja/src/app/page.tsx":"2","/home/aa019/dev/kkanbu-ninja/src/app/api/user/route.ts":"3","/home/aa019/dev/kkanbu-ninja/src/app/api/user/controller.ts":"4","/home/aa019/dev/kkanbu-ninja/src/app/rank/list.tsx":"5","/home/aa019/dev/kkanbu-ninja/src/app/api/request/route.ts":"6","/home/aa019/dev/kkanbu-ninja/src/app/request/list.tsx":"7","/home/aa019/dev/kkanbu-ninja/src/app/request/page.tsx":"8","/home/aa019/dev/kkanbu-ninja/src/app/api/auth/[...nextauth]/route.ts":"9","/home/aa019/dev/kkanbu-ninja/src/app/sign/button.tsx":"10"},{"size":1376,"mtime":1681396267161,"results":"11","hashOfConfig":"12"},{"size":545,"mtime":1681305961886,"results":"13","hashOfConfig":"12"},{"size":350,"mtime":1681233028020,"results":"14","hashOfConfig":"12"},{"size":1276,"mtime":1681305961886,"results":"15","hashOfConfig":"12"},{"size":9191,"mtime":1681305961886,"results":"16","hashOfConfig":"12"},{"size":2087,"mtime":1681396267161,"results":"17","hashOfConfig":"12"},{"size":7007,"mtime":1681396267161,"results":"18","hashOfConfig":"12"},{"size":1133,"mtime":1681396267161,"results":"19","hashOfConfig":"12"},{"size":1095,"mtime":1681396267161,"results":"20","hashOfConfig":"12"},{"size":621,"mtime":1681396267161,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k89io6",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aa019/dev/kkanbu-ninja/src/app/layout.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/page.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/user/route.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/user/controller.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/rank/list.tsx",["53"],[],"\"use client\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport React , { useEffect, useState } from 'react';\r\nimport { ButtonGroup , Button, TextField } from '@mui/material';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\n\r\nexport default function Page(props:any) {\r\n    const {userData} = props\r\n  const [original, setOriginal] = useState<any[]>(userData)\r\n  const [filtered, setFilter] = useState<any[]>(userData)\r\n  const [gemList, setGemList] = useState<any[]>([])\r\n  const [uniqueList, setUniqueList] = useState<any[]>([])\r\n  \r\n  const [filterName, setName] = useState<string>('')\r\n  const [filterLink, setLink] = useState<string>('')\r\n  \r\n  const [filterGem, setGem] = useState<string>('')\r\n  const [filterGemInput, setGemInput] = useState<string>('')\r\n  \r\n  const [filterUnique, setUnique] = useState<string>('')\r\n  const [filterUniqueInput, setUniqueInput] = useState<string>('')\r\n\r\n  const [filterDeath, setDeath] = useState<string>('all')\r\n  useEffect(()=>{\r\n    (async () => {\r\n      setOriginal(userData)\r\n      \r\n      const gemSet = await userData?.reduce((acc:any, user:any)=>{\r\n        user.items?.allGems?.forEach((gemName:any)=>{\r\n          acc.add(gemName)\r\n        })\r\n        \r\n        return acc\r\n      },new Set())\r\n      \r\n      setGemList([\"\",...Array.from(gemSet||[])].sort())\r\n\r\n      const uniqueSet = await userData?.reduce((acc:any, user:any)=>{\r\n        user.items?.allUniques?.forEach((unique:string)=>{\r\n          acc.add(unique)\r\n        })\r\n        \r\n        return acc\r\n      },new Set())\r\n      setUniqueList([\"\",...Array.from(uniqueSet||[])].sort())\r\n      setFilter(userData)\r\n    })()\r\n  },[userData])\r\n  \r\n  \r\n  const findName = (e:any)=>{\r\n    setName(e.target.value||'')\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if (filterName==='' && (filterGem===''||filterGem===null) && filterDeath==='all' && filterUnique==='' && filterLink===''){\r\n      setFilter(original)\r\n      return\r\n    }else{\r\n      const newFiltered = original.filter(user=>{\r\n        const gemCheck = filterGem ? user.items?.allGems?.findIndex((gem:any)=>gem===filterGem)>-1 : true\r\n        const uniqueCheck = filterUnique ? user.items?.allUniques?.findIndex((unique:any)=>unique===filterUnique)>-1 : true\r\n        const deathCheck = filterDeath === 'all'? true : filterDeath==='dead'?user.dead:!user.dead\r\n        const nameCheck = filterName ? (user.name.includes(filterName) || user.account?.includes(filterName) || user.class.includes(filterName)) : true\r\n        const linkCheck = filterLink ? (\r\n          filterLink==='6'? user.items?.has6Link : (\r\n            filterLink==='5'? user.items?.has5Link : (\r\n              filterLink==='4'? user.items?.has6Link===false&&user.items?.has5Link===false : false\r\n            )\r\n          )\r\n        ): true\r\n        return Boolean(gemCheck&&nameCheck&&deathCheck&&uniqueCheck&&linkCheck)\r\n      }).sort((a,b)=>{\r\n        return a.rank-b.rank\r\n      })\r\n      setFilter(newFiltered)\r\n    }\r\n\r\n    \r\n  },[filterGem, filterName, filterDeath, filterUnique,filterLink])\r\n  \r\n  const handleChange = (event: SelectChangeEvent) => {\r\n    setLink(event.target.value as string);\r\n  };\r\n\r\n\r\n  return <TableContainer component={Paper} style={{minWidth:335}}>\r\n    <div className=\"search\" style={{margin:20}}>\r\n    <TextField id=\"outlined-basic\" label=\"검색\" variant=\"outlined\" onChange={findName} />\r\n    <Autocomplete\r\n      disablePortal\r\n      id=\"combo-box-gem\"\r\n      options={gemList}\r\n      sx={{ width: 300 }}\r\n      value={filterGem}\r\n        onChange={(event: any, newValue: string |null) => {\r\n          setGem(newValue||'');\r\n        }}\r\n        inputValue={filterGemInput}\r\n        onInputChange={(event, newInputValue) => {\r\n          setGemInput(newInputValue);\r\n        }}\r\n      renderInput={(params) => <TextField {...params} label=\"쩸\" />}\r\n    />\r\n    <Autocomplete\r\n      disablePortal\r\n      id=\"combo-box-unique\"\r\n      options={uniqueList}\r\n      sx={{ width: 300 }}\r\n      value={filterUnique}\r\n        onChange={(event: any, newValue: string |null) => {\r\n          setUnique(newValue||'');\r\n        }}\r\n        inputValue={filterUniqueInput}\r\n        onInputChange={(event, newInputValue) => {\r\n          setUniqueInput(newInputValue);\r\n        }}\r\n      renderInput={(params) => <TextField {...params} label=\"유닠\" />}\r\n    />\r\n    <FormControl style={{width:150}}>\r\n        <InputLabel id=\"demo-simple-select-label\">링크</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={filterLink}\r\n          label=\"Link\"\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={''}>전부</MenuItem>\r\n          <MenuItem value={'6'}>6링오우너</MenuItem>\r\n          <MenuItem value={'5'}>5링</MenuItem>\r\n          <MenuItem value={'4'}>기타</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      <ButtonGroup variant=\"contained\" aria-label=\"outlined primary button group\">\r\n        <Button style={{backgroundColor:filterDeath==='dead'?'#a54e5d':'gray'}} onClick={()=>setDeath('dead')}>죽음</Button>\r\n        <Button style={{backgroundColor:filterDeath==='all'?'#28281c':'gray'}} onClick={()=>setDeath('all')}>둘다</Button>\r\n        <Button style={{backgroundColor:filterDeath==='alive'?'#5e51af':'gray'}} onClick={()=>setDeath('alive')}>덜죽음</Button>\r\n      </ButtonGroup>\r\n      </div>\r\n      <Table //aria-label=\"simple table\" \r\n      className=\"text-left text-sm font-light\">\r\n        <TableHead className=\"border-b font-medium dark:border-neutral-500\">\r\n          <TableRow style={{backgroundColor:'#626262'}}>\r\n            <TableCell className=\"px-2 py-4\" style={{width: 56}}>순위</TableCell>\r\n            <TableCell className=\"px-6 py-4 hiddenOnMoblie\">계정명</TableCell>\r\n            <TableCell className=\"px-6 py-4\">케릭명</TableCell>\r\n            <TableCell className=\"px-6 py-4 removeOnMobile\">육개장</TableCell>\r\n            <TableCell className=\"px-2 py-4\" >직업</TableCell>\r\n            <TableCell className=\"px-6 py-4\" style={{width: 48}} align=\"right\">LvL</TableCell>\r\n            <TableCell className=\"px-6 py-4 hiddenOnMoblie\" align=\"right\" style={{maxWidth:120}}>경험치</TableCell>\r\n            <TableCell className=\"px-2 py-2 removeOnMobile\">챌린지</TableCell>\r\n            <TableCell className=\"px-6 py-4 hiddenOnMoblie\">보러가기</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {filtered&&filtered.length&&filtered.length>0&&filtered.map((row:any) => (\r\n            <TableRow\r\n            className=\"border-b dark:border-neutral-500 showOnHover\"\r\n              style={{backgroundColor:row.dead?'#a54e5d':'#5e51af'}}\r\n              key={row.rank}\r\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n            >\r\n              <TableCell style={{width: 56}} className=\"whitespace-nowrap px-2 py-2\" align=\"center\" component=\"th\" scope=\"row\">\r\n                {row.rank}\r\n              </TableCell>\r\n              <TableCell className=\"whitespace-nowrap px-6 py-4 hiddenOnMoblie\" component=\"th\" scope=\"row\">\r\n                {row.account}\r\n              </TableCell>\r\n              <TableCell className=\"whitespace-nowrap px-6 py-4\" component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell className=\"whitespace-nowrap px-6 py-4 removeOnMobile\" component=\"th\" scope=\"row\">\r\n                {row.dead?'ㅇㅇ쥬금':'아직안쥬금'}\r\n              </TableCell>\r\n              <TableCell\r\n               className=\"whitespace-nowrap px-2 py-4\" component=\"th\" scope=\"row\">\r\n                {row.class}\r\n              </TableCell>\r\n              <TableCell style={{width: 48}} className=\"whitespace-nowrap px-1 py-4\" component=\"th\" align=\"right\">{row.level}</TableCell>\r\n              <TableCell className=\"whitespace-nowrap px-2 py-4 hiddenOnMoblie\" component=\"th\" align=\"right\" style={{maxWidth:120}}>{row.experience}</TableCell>\r\n              <TableCell className=\"whitespace-nowrap px-2 py-2 removeOnMobile\" component=\"th\" align=\"center\">{row.challenges?.completed}</TableCell>\r\n              <TableCell className=\"whitespace-nowrap px-6 py-4 hiddenOnMoblie\" component=\"th\" scope=\"row\">\r\n                <a style={{    backgroundColor: 'white',\r\n    display: 'inline-block',\r\n    padding: '2px 10px',\r\n    borderRadius: 5}} target='_blank' href={`https://www.pathofexile.com/account/view-profile/${row.account}/characters?characterName=${row.name}`}>\r\n                  POE\r\n                </a>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n}","/home/aa019/dev/kkanbu-ninja/src/app/api/request/route.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/request/list.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/request/page.tsx",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/api/auth/[...nextauth]/route.ts",[],[],"/home/aa019/dev/kkanbu-ninja/src/app/sign/button.tsx",[],[],{"ruleId":"54","severity":1,"message":"55","line":90,"column":5,"nodeType":"56","endLine":90,"endColumn":66,"suggestions":"57"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'original'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilter' needs the current value of 'original'.","ArrayExpression",["58"],{"desc":"59","fix":"60"},"Update the dependencies array to be: [filterGem, filterName, filterDeath, filterUnique, filterLink, original]",{"range":"61","text":"62"},[3481,3542],"[filterGem, filterName, filterDeath, filterUnique, filterLink, original]"]